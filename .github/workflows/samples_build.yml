name: Build Samples (reusable)
on:
  workflow_call:

jobs:
  build-samples:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create temp Unity project
        env:
          UNITY_VER: 6000.2.8f1
        run: |
          mkdir -p TempProject/Assets TempProject/Packages TempProject/ProjectSettings
          cat > TempProject/Packages/manifest.json << 'JSON'
          {
            "dependencies": {
              "com.unity.modules.ui": "1.0.0",
              "com.unity.modules.uielements": "1.0.0",
              "com.caskev.grid-toolkit": "https://github.com/kevincastejon/com.caskev.grid-toolkit.git#${{ github.sha }}"
            }
          }
          JSON
          echo "m_EditorVersion: ${UNITY_VER}" > TempProject/ProjectSettings/ProjectVersion.txt

      - name: Add editor build script
        run: |
          mkdir -p TempProject/Assets/Editor
          cat > TempProject/Assets/Editor/BuildSamples.cs << 'CS'
          using System.IO;
          using System.Linq;
          using UnityEditor;
          using UnityEditor.PackageManager;
          using UnityEngine;
          using System.Collections.Generic;

          public static class BuildSamples
          {
              [System.Serializable] class PackageJson { public SampleEntry[] samples; }
              [System.Serializable] class SampleEntry { public string displayName; public string description; public string path; }

              static string FindPackagePath(string packageName)
              {
                  var list = Client.List(true);
                  while (!list.IsCompleted) { System.Threading.Thread.Sleep(50); }
                  var pkg = list.Result.FirstOrDefault(p => p.name == packageName);
                  if (pkg == null) throw new System.Exception("Package not found: " + packageName);
                  return pkg.resolvedPath;
              }

              [MenuItem("CI/Build WebGL Samples")]
              public static void Run()
              {
                  PlayerSettings.WebGL.compressionFormat = WebGLCompressionFormat.Brotli;
                  PlayerSettings.WebGL.decompressionFallback = true;

                  const string pkgName = "com.caskev.grid-toolkit";
                  string pkgPath = FindPackagePath(pkgName);
                  string pkgJson = Path.Combine(pkgPath, "package.json");
                  if (!File.Exists(pkgJson)) throw new System.Exception("package.json not found: " + pkgJson);

                  var config = JsonUtility.FromJson<PackageJson>(File.ReadAllText(pkgJson));
                  if (config == null || config.samples == null || config.samples.Length == 0) return;

                  string outRoot = "build-webgl";
                  Directory.CreateDirectory(outRoot);

                  foreach (var s in config.samples)
                  {
                      if (s == null || string.IsNullOrEmpty(s.path)) continue;

                      string src = Path.Combine(pkgPath, s.path);
                      if (!Directory.Exists(src)) { Debug.LogWarning("Sample path not found: " + src); continue; }

                      string pathName = Path.GetFileName(src.TrimEnd(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar));
                      string display = string.IsNullOrEmpty(s.displayName) ? pathName : s.displayName;

                      string safeName = MakeSafe(display);
                      string dst = Path.Combine("Assets", "Samples", pkgName, safeName);
                      CopyRecursive(src, dst);

                      var want = new HashSet<string>(new[]{ pathName, display }, System.StringComparer.OrdinalIgnoreCase);
                      var scenes = Directory.GetFiles(dst, "*.unity", SearchOption.AllDirectories)
                                            .Where(p => want.Contains(Path.GetFileNameWithoutExtension(p)))
                                            .Select(Norm)
                                            .ToArray();
                      if (scenes.Length == 0) { Debug.LogWarning("No matching scene for sample " + safeName); continue; }

                      string buildDir = Path.Combine(outRoot, safeName);
                      Directory.CreateDirectory(buildDir);

                      var report = BuildPipeline.BuildPlayer(scenes, buildDir, BuildTarget.WebGL, BuildOptions.None);
                      if (report.summary.result != UnityEditor.Build.Reporting.BuildResult.Succeeded)
                          throw new System.Exception("Build failed for " + safeName);
                  }

                  AssetDatabase.Refresh();
              }

              static string Norm(string p) => p.Replace('\\','/');
              static string MakeSafe(string name) { foreach (char c in Path.GetInvalidFileNameChars()) name = name.Replace(c, '_'); return name; }
              static void CopyRecursive(string src, string dst)
              {
                  foreach (var dir in Directory.GetDirectories(src, "*", SearchOption.AllDirectories))
                      Directory.CreateDirectory(dir.Replace(src, dst));
                  foreach (var file in Directory.GetFiles(src, "*", SearchOption.AllDirectories))
                  {
                      string to = file.Replace(src, dst);
                      Directory.CreateDirectory(Path.GetDirectoryName(to));
                      File.Copy(file, to, true);
                  }
              }
          }
          CS

      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: TempProject/Library
          key: Library-GridToolkit-WebGL-6000.2.8f1
          restore-keys: |
            Library-GridToolkit-WebGL-

      - name: Build WebGL
        uses: game-ci/unity-builder@v4
        with:
          projectPath: TempProject
          targetPlatform: WebGL
          unityVersion: 6000.2.8f1
          buildMethod: BuildSamples.Run
          versioning: None

      - name: Pack samples artifact
        run: |
          mkdir -p public-samples/samples
          cp -r TempProject/build-webgl/* public-samples/samples/

      - name: Upload samples artifact
        uses: actions/upload-artifact@v4
        with:
          name: samples-site
          path: public-samples
